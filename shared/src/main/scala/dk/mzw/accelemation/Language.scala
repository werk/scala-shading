package dk.mzw.accelemation

import Internal._

object Language {

    case class Term[A](untyped : Untyped)

    type R = Term[Double]
    type Vec2 = Term[(Double, Double)]
    type Vec3 = Term[(Double, Double, Double)]
    type Vec4 = Term[(Double, Double, Double, Double)]

    type B = Term[Boolean]

    type Time = R
    type Color = Vec4

    type Image = R => R => Color
    type Animation = Time => Image

    def vec2(x : R, y : R) : Vec2 = Term(Call("vec2",List(x.untyped, y.untyped)))
    def vec3(x : R, y : R, z : R) : Vec3 = Term(Call("vec3",List(x.untyped, y.untyped, z.untyped)))
    def vec4(x : R, y : R, z : R, w : R) : Vec4 = Term(Call("vec4",List(x.untyped, y.untyped, z.untyped, w.untyped)))
    def vec4(x : R, yzw : Vec3) : Vec4 = Term(Call("vec4",List(x.untyped, yzw.untyped)))
    //def vec4(xy : Vec2, zw : Vec2) : Vec4 = Term(Call("vec4",List(xy.untyped, zw.untyped)))
    //def vec4(xyz : Vec3, w : R) : Vec4 = Term(Call("vec4",List(xyz.untyped, w.untyped)))

    def if_[A](condition : B, whenTrue : Term[A], whenFalse : Term[A]) : Term[A] = Term(If(condition.untyped, whenTrue.untyped, whenFalse.untyped))

    val rgba : (R, R, R, R) => Color = vec4

    implicit def fromDouble(r : Double) : R = Term(Constant(r))
    implicit def fromInteger(r : Int) : R = fromDouble(r.toDouble)

    implicit class RealWithOperations[A](a : A) (implicit toReal : A => R){
        def +(b : R) : R = Term(Infix("+", a.untyped, b.untyped))
        def -(b : R) : R = Term(Infix("-", a.untyped, b.untyped))
        def *(b : R) : R = Term(Infix("*", a.untyped, b.untyped))
        def unary_-() : R = Term(Prefix("-", a.untyped))
        def /(b : R) : R = Term(Infix("/", a.untyped, b.untyped))

        def ===(b : R) : B = Term(Infix("==", a.untyped, b.untyped))
        def !=(b : R) : B = Term(Infix("!=", a.untyped, b.untyped))
        def <(b : R) : B = Term(Infix("<", a.untyped, b.untyped))
        def >(b : R) : B = Term(Infix(">", a.untyped, b.untyped))
        def <=(b : R) : B = Term(Infix("<=", a.untyped, b.untyped))
        def >=(b : R) : B = Term(Infix(">=", a.untyped, b.untyped))
    }

    case object IsVector
    implicit def vec2IsVector(v : Vec2) : IsVector.type = IsVector
    implicit def vec3IsVector(v : Vec3) : IsVector.type = IsVector
    implicit def vec4IsVector(v : Vec4) : IsVector.type = IsVector

    implicit class VectorWithOperations[T](a : Term[T])(implicit evidence: Term[T] => IsVector.type){
        def dot(b : Term[T]) : R = Term(Call("dot", List(a.untyped, b.untyped)))
        def magnitude : R = Term(Call("length", List(a.untyped)))
        def distance(b : Term[T]) : R = Term(Call("distance", List(a.untyped, b.untyped)))
        def normalize : Term[T] = Term(Call("normalize", List(a.untyped)))
        def faceforward(b : Term[T], c : Term[T]) : Term[T] = Term(Call("faceforward", List(a.untyped, b.untyped, c.untyped)))
        def reflect(b : Term[T]) : Term[T] = Term(Call("reflect", List(a.untyped, b.untyped)))
    }

    implicit class BoolWithOperations(a : B){
        def unary_!() : B = Term(Prefix("!", a.untyped))
        def &&(b : B) : B = Term(Infix("&&", a.untyped, b.untyped))
        def ||(b : B) : B = Term(Infix("||", a.untyped, b.untyped))
    }

    implicit class ColorWithOperations(a : Color){
        def red : R = Term(Field("x", a.untyped))
        def green : R = Term(Field("y", a.untyped))
        def blue : R = Term(Field("z", a.untyped))
        def alpha : R = Term(Field("w", a.untyped))
    }

    case class VariableType[T](t : String)
    implicit def BoolType = VariableType[B]("bool")
    implicit def RealType = VariableType[R]("float")
    implicit def Vec2Type = VariableType[Vec2]("vec2")
    implicit def Vec3Type = VariableType[Vec3]("vec3")
    implicit def Vec4Type = VariableType[Vec4]("vec4")

    implicit class Bindable[A](a : Term[A]) (implicit variableType : VariableType[Term[A]]){
        def bind[B](f : Term[A] => Term[B]) : Term[B] = {
            def body(a: Untyped): Untyped = f(Term(a)).untyped
            Term(Bind(variableType.t, a.untyped, body))
        }
    }

    object Math {
        val pi = bindNativeConstant[Double]("""
            const float pi = 3.141592653589793238462643383;
        """)

        def abs(a : R) : R = Term(Call("abs", List(a.untyped)))
        def sign(a : R) : R = Term(Call("sign", List(a.untyped)))
        def sqrt(a : R) : R = Term(Call("sqrt", List(a.untyped)))
        def exp (a : R) : R = Term(Call("exp", List(a.untyped)))
        def log (a : R) : R = Term(Call("log", List(a.untyped)))
        def sin (a : R) : R = Term(Call("sin", List(a.untyped)))
        def tan (a : R) : R = Term(Call("tan", List(a.untyped)))
        def cos (a : R) : R = Term(Call("cos", List(a.untyped)))
        def asin (a : R) : R = Term(Call("asin", List(a.untyped)))
        def atan (a : R) : R = Term(Call("atan", List(a.untyped)))
        def acos (a : R) : R = Term(Call("acos", List(a.untyped)))
        def sinh (a : R) : R = Term(Call("sinh", List(a.untyped)))
        def tanh (a : R) : R = Term(Call("tanh", List(a.untyped)))
        def cosh (a : R) : R = Term(Call("cosh", List(a.untyped)))
        def asinh (a : R) : R = Term(Call("asinh", List(a.untyped)))
        def atanh (a : R) : R = Term(Call("atanh", List(a.untyped)))
        def acosh (a : R) : R = Term(Call("acosh", List(a.untyped)))

        def pow(a : R, b : R) : R = Term(Call("pow", List(a.untyped, b.untyped)))
        def max (a : R, b : R) : R = Term(Call("max", List(a.untyped, b.untyped)))
        def min (a : R, b : R) : R = Term(Call("min", List(a.untyped, b.untyped)))
        def mod (a : R, b : R) : R = Term(Call("mod", List(a.untyped, b.untyped)))
        def round (a : R) : R = floor(0.5 + a)
        def floor (a : R) : R = Term(Call("floor", List(a.untyped)))
        def ceil (a : R) : R = Term(Call("ceil", List(a.untyped)))
        def atan2(x : R, y : R) : R = 2 * atan(y / (sqrt (pow(x, 2) + pow(y, 2)) + x))
    }

    implicit def liftUniformB(uniform : Uniform[Boolean]) : B = Term(UniformU(uniform, "bool"))
    implicit def liftUniformR(uniform : Uniform[Double]) : R = Term(UniformU(uniform, "float"))
    implicit def liftUniformVec2(uniform : Uniform[(Double, Double)]) : Vec2 = Term(UniformU(uniform, "vec2"))
    implicit def liftUniformVec3(uniform : Uniform[(Double, Double, Double)]) : Vec3 = Term(UniformU(uniform, "vec3"))
    implicit def liftUniformVec4(uniform : Uniform[(Double, Double, Double, Double)]) : Vec4 = Term(UniformU(uniform, "vec4"))

    implicit class Vector2WithOperations(v : Term[(Double, Double )]){
        def x : R = Term(Field("x", v.untyped))
        def y : R = Term(Field("y", v.untyped))
        def xx : Vec2 = Term(Field("xx", v.untyped))
        def xy : Vec2 = v
        def yx : Vec2 = Term(Field("yx", v.untyped))
        def yy : Vec2 = Term(Field("yy", v.untyped))
    }

    implicit class Vector3WithOperations(v : Term[(Double, Double, Double)]){
        def x : R = Term(Field("x", v.untyped))
        def y : R = Term(Field("y", v.untyped))
        def z : R = Term(Field("z", v.untyped))

        def xx : Vec2 = Term(Field("xx", v.untyped))
        def xy : Vec2 = Term(Field("xy", v.untyped))
        def xz : Vec2 = Term(Field("xz", v.untyped))
        def yx : Vec2 = Term(Field("yx", v.untyped))
        def yy : Vec2 = Term(Field("yy", v.untyped))
        def yz : Vec2 = Term(Field("yz", v.untyped))
        def zx : Vec2 = Term(Field("zx", v.untyped))
        def zy : Vec2 = Term(Field("zy", v.untyped))
        def zz : Vec2 = Term(Field("zz", v.untyped))

        def xxx : Vec3 = Term(Field("xxx", v.untyped))
        def xxy : Vec3 = Term(Field("xxy", v.untyped))
        def xxz : Vec3 = Term(Field("xxz", v.untyped))
        def xyx : Vec3 = Term(Field("xyx", v.untyped))
        def xyy : Vec3 = Term(Field("xyy", v.untyped))
        def xyz : Vec3 = Term(Field("xyz", v.untyped))
        def xzx : Vec3 = Term(Field("xzx", v.untyped))
        def xzy : Vec3 = Term(Field("xzy", v.untyped))
        def xzz : Vec3 = Term(Field("xzz", v.untyped))
        def yxx : Vec3 = Term(Field("yxx", v.untyped))
        def yxy : Vec3 = Term(Field("yxy", v.untyped))
        def yxz : Vec3 = Term(Field("yxz", v.untyped))
        def yyx : Vec3 = Term(Field("yyx", v.untyped))
        def yyy : Vec3 = Term(Field("yyy", v.untyped))
        def yyz : Vec3 = Term(Field("yyz", v.untyped))
        def yzx : Vec3 = Term(Field("yzx", v.untyped))
        def yzy : Vec3 = Term(Field("yzy", v.untyped))
        def yzz : Vec3 = Term(Field("yzz", v.untyped))
        def zxx : Vec3 = Term(Field("zxx", v.untyped))
        def zxy : Vec3 = Term(Field("zxy", v.untyped))
        def zxz : Vec3 = Term(Field("zxz", v.untyped))
        def zyx : Vec3 = Term(Field("zyx", v.untyped))
        def zyy : Vec3 = Term(Field("zyy", v.untyped))
        def zyz : Vec3 = Term(Field("zyz", v.untyped))
        def zzx : Vec3 = Term(Field("zzx", v.untyped))
        def zzy : Vec3 = Term(Field("zzy", v.untyped))
        def zzz : Vec3 = Term(Field("zzz", v.untyped))
    }

    implicit class Vector4WithOperations(v : Term[(Double, Double, Double, Double)]) {
        def x : R = Term(Field("x", v.untyped))
        def y : R = Term(Field("y", v.untyped))
        def z : R = Term(Field("z", v.untyped))
        def w : R = Term(Field("w", v.untyped))

        def xx : Vec2 = Term(Field("xx", v.untyped))
        def xy : Vec2 = Term(Field("xy", v.untyped))
        def xz : Vec2 = Term(Field("xz", v.untyped))
        def xw : Vec2 = Term(Field("xw", v.untyped))
        def yx : Vec2 = Term(Field("yx", v.untyped))
        def yy : Vec2 = Term(Field("yy", v.untyped))
        def yz : Vec2 = Term(Field("yz", v.untyped))
        def yw : Vec2 = Term(Field("yw", v.untyped))
        def zx : Vec2 = Term(Field("zx", v.untyped))
        def zy : Vec2 = Term(Field("zy", v.untyped))
        def zz : Vec2 = Term(Field("zz", v.untyped))
        def zw : Vec2 = Term(Field("zw", v.untyped))
        def wx : Vec2 = Term(Field("wx", v.untyped))
        def wy : Vec2 = Term(Field("wy", v.untyped))
        def wz : Vec2 = Term(Field("wz", v.untyped))
        def ww : Vec2 = Term(Field("ww", v.untyped))

        def xxx : Vec3 = Term(Field("xxx", v.untyped))
        def xxy : Vec3 = Term(Field("xxy", v.untyped))
        def xxz : Vec3 = Term(Field("xxz", v.untyped))
        def xxw : Vec3 = Term(Field("xxw", v.untyped))
        def xyx : Vec3 = Term(Field("xyx", v.untyped))
        def xyy : Vec3 = Term(Field("xyy", v.untyped))
        def xyz : Vec3 = Term(Field("xyz", v.untyped))
        def xyw : Vec3 = Term(Field("xyw", v.untyped))
        def xzx : Vec3 = Term(Field("xzx", v.untyped))
        def xzy : Vec3 = Term(Field("xzy", v.untyped))
        def xzz : Vec3 = Term(Field("xzz", v.untyped))
        def xzw : Vec3 = Term(Field("xzw", v.untyped))
        def xwx : Vec3 = Term(Field("xwx", v.untyped))
        def xwy : Vec3 = Term(Field("xwy", v.untyped))
        def xwz : Vec3 = Term(Field("xwz", v.untyped))
        def xww : Vec3 = Term(Field("xww", v.untyped))
        def yxx : Vec3 = Term(Field("yxx", v.untyped))
        def yxy : Vec3 = Term(Field("yxy", v.untyped))
        def yxz : Vec3 = Term(Field("yxz", v.untyped))
        def yxw : Vec3 = Term(Field("yxw", v.untyped))
        def yyx : Vec3 = Term(Field("yyx", v.untyped))
        def yyy : Vec3 = Term(Field("yyy", v.untyped))
        def yyz : Vec3 = Term(Field("yyz", v.untyped))
        def yyw : Vec3 = Term(Field("yyw", v.untyped))
        def yzx : Vec3 = Term(Field("yzx", v.untyped))
        def yzy : Vec3 = Term(Field("yzy", v.untyped))
        def yzz : Vec3 = Term(Field("yzz", v.untyped))
        def yzw : Vec3 = Term(Field("yzw", v.untyped))
        def ywx : Vec3 = Term(Field("ywx", v.untyped))
        def ywy : Vec3 = Term(Field("ywy", v.untyped))
        def ywz : Vec3 = Term(Field("ywz", v.untyped))
        def yww : Vec3 = Term(Field("yww", v.untyped))
        def zxx : Vec3 = Term(Field("zxx", v.untyped))
        def zxy : Vec3 = Term(Field("zxy", v.untyped))
        def zxz : Vec3 = Term(Field("zxz", v.untyped))
        def zxw : Vec3 = Term(Field("zxw", v.untyped))
        def zyx : Vec3 = Term(Field("zyx", v.untyped))
        def zyy : Vec3 = Term(Field("zyy", v.untyped))
        def zyz : Vec3 = Term(Field("zyz", v.untyped))
        def zyw : Vec3 = Term(Field("zyw", v.untyped))
        def zzx : Vec3 = Term(Field("zzx", v.untyped))
        def zzy : Vec3 = Term(Field("zzy", v.untyped))
        def zzz : Vec3 = Term(Field("zzz", v.untyped))
        def zzw : Vec3 = Term(Field("zzw", v.untyped))
        def zwx : Vec3 = Term(Field("zwx", v.untyped))
        def zwy : Vec3 = Term(Field("zwy", v.untyped))
        def zwz : Vec3 = Term(Field("zwz", v.untyped))
        def zww : Vec3 = Term(Field("zww", v.untyped))
        def wxx : Vec3 = Term(Field("wxx", v.untyped))
        def wxy : Vec3 = Term(Field("wxy", v.untyped))
        def wxz : Vec3 = Term(Field("wxz", v.untyped))
        def wxw : Vec3 = Term(Field("wxw", v.untyped))
        def wyx : Vec3 = Term(Field("wyx", v.untyped))
        def wyy : Vec3 = Term(Field("wyy", v.untyped))
        def wyz : Vec3 = Term(Field("wyz", v.untyped))
        def wyw : Vec3 = Term(Field("wyw", v.untyped))
        def wzx : Vec3 = Term(Field("wzx", v.untyped))
        def wzy : Vec3 = Term(Field("wzy", v.untyped))
        def wzz : Vec3 = Term(Field("wzz", v.untyped))
        def wzw : Vec3 = Term(Field("wzw", v.untyped))
        def wwx : Vec3 = Term(Field("wwx", v.untyped))
        def wwy : Vec3 = Term(Field("wwy", v.untyped))
        def wwz : Vec3 = Term(Field("wwz", v.untyped))
        def www : Vec3 = Term(Field("www", v.untyped))

        def xxxx : Vec4 = Term(Field("xxxx", v.untyped))
        def xxxy : Vec4 = Term(Field("xxxy", v.untyped))
        def xxxz : Vec4 = Term(Field("xxxz", v.untyped))
        def xxxw : Vec4 = Term(Field("xxxw", v.untyped))
        def xxyx : Vec4 = Term(Field("xxyx", v.untyped))
        def xxyy : Vec4 = Term(Field("xxyy", v.untyped))
        def xxyz : Vec4 = Term(Field("xxyz", v.untyped))
        def xxyw : Vec4 = Term(Field("xxyw", v.untyped))
        def xxzx : Vec4 = Term(Field("xxzx", v.untyped))
        def xxzy : Vec4 = Term(Field("xxzy", v.untyped))
        def xxzz : Vec4 = Term(Field("xxzz", v.untyped))
        def xxzw : Vec4 = Term(Field("xxzw", v.untyped))
        def xxwx : Vec4 = Term(Field("xxwx", v.untyped))
        def xxwy : Vec4 = Term(Field("xxwy", v.untyped))
        def xxwz : Vec4 = Term(Field("xxwz", v.untyped))
        def xxww : Vec4 = Term(Field("xxww", v.untyped))
        def xyxx : Vec4 = Term(Field("xyxx", v.untyped))
        def xyxy : Vec4 = Term(Field("xyxy", v.untyped))
        def xyxz : Vec4 = Term(Field("xyxz", v.untyped))
        def xyxw : Vec4 = Term(Field("xyxw", v.untyped))
        def xyyx : Vec4 = Term(Field("xyyx", v.untyped))
        def xyyy : Vec4 = Term(Field("xyyy", v.untyped))
        def xyyz : Vec4 = Term(Field("xyyz", v.untyped))
        def xyyw : Vec4 = Term(Field("xyyw", v.untyped))
        def xyzx : Vec4 = Term(Field("xyzx", v.untyped))
        def xyzy : Vec4 = Term(Field("xyzy", v.untyped))
        def xyzz : Vec4 = Term(Field("xyzz", v.untyped))
        def xyzw : Vec4 = Term(Field("xyzw", v.untyped))
        def xywx : Vec4 = Term(Field("xywx", v.untyped))
        def xywy : Vec4 = Term(Field("xywy", v.untyped))
        def xywz : Vec4 = Term(Field("xywz", v.untyped))
        def xyww : Vec4 = Term(Field("xyww", v.untyped))
        def xzxx : Vec4 = Term(Field("xzxx", v.untyped))
        def xzxy : Vec4 = Term(Field("xzxy", v.untyped))
        def xzxz : Vec4 = Term(Field("xzxz", v.untyped))
        def xzxw : Vec4 = Term(Field("xzxw", v.untyped))
        def xzyx : Vec4 = Term(Field("xzyx", v.untyped))
        def xzyy : Vec4 = Term(Field("xzyy", v.untyped))
        def xzyz : Vec4 = Term(Field("xzyz", v.untyped))
        def xzyw : Vec4 = Term(Field("xzyw", v.untyped))
        def xzzx : Vec4 = Term(Field("xzzx", v.untyped))
        def xzzy : Vec4 = Term(Field("xzzy", v.untyped))
        def xzzz : Vec4 = Term(Field("xzzz", v.untyped))
        def xzzw : Vec4 = Term(Field("xzzw", v.untyped))
        def xzwx : Vec4 = Term(Field("xzwx", v.untyped))
        def xzwy : Vec4 = Term(Field("xzwy", v.untyped))
        def xzwz : Vec4 = Term(Field("xzwz", v.untyped))
        def xzww : Vec4 = Term(Field("xzww", v.untyped))
        def xwxx : Vec4 = Term(Field("xwxx", v.untyped))
        def xwxy : Vec4 = Term(Field("xwxy", v.untyped))
        def xwxz : Vec4 = Term(Field("xwxz", v.untyped))
        def xwxw : Vec4 = Term(Field("xwxw", v.untyped))
        def xwyx : Vec4 = Term(Field("xwyx", v.untyped))
        def xwyy : Vec4 = Term(Field("xwyy", v.untyped))
        def xwyz : Vec4 = Term(Field("xwyz", v.untyped))
        def xwyw : Vec4 = Term(Field("xwyw", v.untyped))
        def xwzx : Vec4 = Term(Field("xwzx", v.untyped))
        def xwzy : Vec4 = Term(Field("xwzy", v.untyped))
        def xwzz : Vec4 = Term(Field("xwzz", v.untyped))
        def xwzw : Vec4 = Term(Field("xwzw", v.untyped))
        def xwwx : Vec4 = Term(Field("xwwx", v.untyped))
        def xwwy : Vec4 = Term(Field("xwwy", v.untyped))
        def xwwz : Vec4 = Term(Field("xwwz", v.untyped))
        def xwww : Vec4 = Term(Field("xwww", v.untyped))
        def yxxx : Vec4 = Term(Field("yxxx", v.untyped))
        def yxxy : Vec4 = Term(Field("yxxy", v.untyped))
        def yxxz : Vec4 = Term(Field("yxxz", v.untyped))
        def yxxw : Vec4 = Term(Field("yxxw", v.untyped))
        def yxyx : Vec4 = Term(Field("yxyx", v.untyped))
        def yxyy : Vec4 = Term(Field("yxyy", v.untyped))
        def yxyz : Vec4 = Term(Field("yxyz", v.untyped))
        def yxyw : Vec4 = Term(Field("yxyw", v.untyped))
        def yxzx : Vec4 = Term(Field("yxzx", v.untyped))
        def yxzy : Vec4 = Term(Field("yxzy", v.untyped))
        def yxzz : Vec4 = Term(Field("yxzz", v.untyped))
        def yxzw : Vec4 = Term(Field("yxzw", v.untyped))
        def yxwx : Vec4 = Term(Field("yxwx", v.untyped))
        def yxwy : Vec4 = Term(Field("yxwy", v.untyped))
        def yxwz : Vec4 = Term(Field("yxwz", v.untyped))
        def yxww : Vec4 = Term(Field("yxww", v.untyped))
        def yyxx : Vec4 = Term(Field("yyxx", v.untyped))
        def yyxy : Vec4 = Term(Field("yyxy", v.untyped))
        def yyxz : Vec4 = Term(Field("yyxz", v.untyped))
        def yyxw : Vec4 = Term(Field("yyxw", v.untyped))
        def yyyx : Vec4 = Term(Field("yyyx", v.untyped))
        def yyyy : Vec4 = Term(Field("yyyy", v.untyped))
        def yyyz : Vec4 = Term(Field("yyyz", v.untyped))
        def yyyw : Vec4 = Term(Field("yyyw", v.untyped))
        def yyzx : Vec4 = Term(Field("yyzx", v.untyped))
        def yyzy : Vec4 = Term(Field("yyzy", v.untyped))
        def yyzz : Vec4 = Term(Field("yyzz", v.untyped))
        def yyzw : Vec4 = Term(Field("yyzw", v.untyped))
        def yywx : Vec4 = Term(Field("yywx", v.untyped))
        def yywy : Vec4 = Term(Field("yywy", v.untyped))
        def yywz : Vec4 = Term(Field("yywz", v.untyped))
        def yyww : Vec4 = Term(Field("yyww", v.untyped))
        def yzxx : Vec4 = Term(Field("yzxx", v.untyped))
        def yzxy : Vec4 = Term(Field("yzxy", v.untyped))
        def yzxz : Vec4 = Term(Field("yzxz", v.untyped))
        def yzxw : Vec4 = Term(Field("yzxw", v.untyped))
        def yzyx : Vec4 = Term(Field("yzyx", v.untyped))
        def yzyy : Vec4 = Term(Field("yzyy", v.untyped))
        def yzyz : Vec4 = Term(Field("yzyz", v.untyped))
        def yzyw : Vec4 = Term(Field("yzyw", v.untyped))
        def yzzx : Vec4 = Term(Field("yzzx", v.untyped))
        def yzzy : Vec4 = Term(Field("yzzy", v.untyped))
        def yzzz : Vec4 = Term(Field("yzzz", v.untyped))
        def yzzw : Vec4 = Term(Field("yzzw", v.untyped))
        def yzwx : Vec4 = Term(Field("yzwx", v.untyped))
        def yzwy : Vec4 = Term(Field("yzwy", v.untyped))
        def yzwz : Vec4 = Term(Field("yzwz", v.untyped))
        def yzww : Vec4 = Term(Field("yzww", v.untyped))
        def ywxx : Vec4 = Term(Field("ywxx", v.untyped))
        def ywxy : Vec4 = Term(Field("ywxy", v.untyped))
        def ywxz : Vec4 = Term(Field("ywxz", v.untyped))
        def ywxw : Vec4 = Term(Field("ywxw", v.untyped))
        def ywyx : Vec4 = Term(Field("ywyx", v.untyped))
        def ywyy : Vec4 = Term(Field("ywyy", v.untyped))
        def ywyz : Vec4 = Term(Field("ywyz", v.untyped))
        def ywyw : Vec4 = Term(Field("ywyw", v.untyped))
        def ywzx : Vec4 = Term(Field("ywzx", v.untyped))
        def ywzy : Vec4 = Term(Field("ywzy", v.untyped))
        def ywzz : Vec4 = Term(Field("ywzz", v.untyped))
        def ywzw : Vec4 = Term(Field("ywzw", v.untyped))
        def ywwx : Vec4 = Term(Field("ywwx", v.untyped))
        def ywwy : Vec4 = Term(Field("ywwy", v.untyped))
        def ywwz : Vec4 = Term(Field("ywwz", v.untyped))
        def ywww : Vec4 = Term(Field("ywww", v.untyped))
        def zxxx : Vec4 = Term(Field("zxxx", v.untyped))
        def zxxy : Vec4 = Term(Field("zxxy", v.untyped))
        def zxxz : Vec4 = Term(Field("zxxz", v.untyped))
        def zxxw : Vec4 = Term(Field("zxxw", v.untyped))
        def zxyx : Vec4 = Term(Field("zxyx", v.untyped))
        def zxyy : Vec4 = Term(Field("zxyy", v.untyped))
        def zxyz : Vec4 = Term(Field("zxyz", v.untyped))
        def zxyw : Vec4 = Term(Field("zxyw", v.untyped))
        def zxzx : Vec4 = Term(Field("zxzx", v.untyped))
        def zxzy : Vec4 = Term(Field("zxzy", v.untyped))
        def zxzz : Vec4 = Term(Field("zxzz", v.untyped))
        def zxzw : Vec4 = Term(Field("zxzw", v.untyped))
        def zxwx : Vec4 = Term(Field("zxwx", v.untyped))
        def zxwy : Vec4 = Term(Field("zxwy", v.untyped))
        def zxwz : Vec4 = Term(Field("zxwz", v.untyped))
        def zxww : Vec4 = Term(Field("zxww", v.untyped))
        def zyxx : Vec4 = Term(Field("zyxx", v.untyped))
        def zyxy : Vec4 = Term(Field("zyxy", v.untyped))
        def zyxz : Vec4 = Term(Field("zyxz", v.untyped))
        def zyxw : Vec4 = Term(Field("zyxw", v.untyped))
        def zyyx : Vec4 = Term(Field("zyyx", v.untyped))
        def zyyy : Vec4 = Term(Field("zyyy", v.untyped))
        def zyyz : Vec4 = Term(Field("zyyz", v.untyped))
        def zyyw : Vec4 = Term(Field("zyyw", v.untyped))
        def zyzx : Vec4 = Term(Field("zyzx", v.untyped))
        def zyzy : Vec4 = Term(Field("zyzy", v.untyped))
        def zyzz : Vec4 = Term(Field("zyzz", v.untyped))
        def zyzw : Vec4 = Term(Field("zyzw", v.untyped))
        def zywx : Vec4 = Term(Field("zywx", v.untyped))
        def zywy : Vec4 = Term(Field("zywy", v.untyped))
        def zywz : Vec4 = Term(Field("zywz", v.untyped))
        def zyww : Vec4 = Term(Field("zyww", v.untyped))
        def zzxx : Vec4 = Term(Field("zzxx", v.untyped))
        def zzxy : Vec4 = Term(Field("zzxy", v.untyped))
        def zzxz : Vec4 = Term(Field("zzxz", v.untyped))
        def zzxw : Vec4 = Term(Field("zzxw", v.untyped))
        def zzyx : Vec4 = Term(Field("zzyx", v.untyped))
        def zzyy : Vec4 = Term(Field("zzyy", v.untyped))
        def zzyz : Vec4 = Term(Field("zzyz", v.untyped))
        def zzyw : Vec4 = Term(Field("zzyw", v.untyped))
        def zzzx : Vec4 = Term(Field("zzzx", v.untyped))
        def zzzy : Vec4 = Term(Field("zzzy", v.untyped))
        def zzzz : Vec4 = Term(Field("zzzz", v.untyped))
        def zzzw : Vec4 = Term(Field("zzzw", v.untyped))
        def zzwx : Vec4 = Term(Field("zzwx", v.untyped))
        def zzwy : Vec4 = Term(Field("zzwy", v.untyped))
        def zzwz : Vec4 = Term(Field("zzwz", v.untyped))
        def zzww : Vec4 = Term(Field("zzww", v.untyped))
        def zwxx : Vec4 = Term(Field("zwxx", v.untyped))
        def zwxy : Vec4 = Term(Field("zwxy", v.untyped))
        def zwxz : Vec4 = Term(Field("zwxz", v.untyped))
        def zwxw : Vec4 = Term(Field("zwxw", v.untyped))
        def zwyx : Vec4 = Term(Field("zwyx", v.untyped))
        def zwyy : Vec4 = Term(Field("zwyy", v.untyped))
        def zwyz : Vec4 = Term(Field("zwyz", v.untyped))
        def zwyw : Vec4 = Term(Field("zwyw", v.untyped))
        def zwzx : Vec4 = Term(Field("zwzx", v.untyped))
        def zwzy : Vec4 = Term(Field("zwzy", v.untyped))
        def zwzz : Vec4 = Term(Field("zwzz", v.untyped))
        def zwzw : Vec4 = Term(Field("zwzw", v.untyped))
        def zwwx : Vec4 = Term(Field("zwwx", v.untyped))
        def zwwy : Vec4 = Term(Field("zwwy", v.untyped))
        def zwwz : Vec4 = Term(Field("zwwz", v.untyped))
        def zwww : Vec4 = Term(Field("zwww", v.untyped))
        def wxxx : Vec4 = Term(Field("wxxx", v.untyped))
        def wxxy : Vec4 = Term(Field("wxxy", v.untyped))
        def wxxz : Vec4 = Term(Field("wxxz", v.untyped))
        def wxxw : Vec4 = Term(Field("wxxw", v.untyped))
        def wxyx : Vec4 = Term(Field("wxyx", v.untyped))
        def wxyy : Vec4 = Term(Field("wxyy", v.untyped))
        def wxyz : Vec4 = Term(Field("wxyz", v.untyped))
        def wxyw : Vec4 = Term(Field("wxyw", v.untyped))
        def wxzx : Vec4 = Term(Field("wxzx", v.untyped))
        def wxzy : Vec4 = Term(Field("wxzy", v.untyped))
        def wxzz : Vec4 = Term(Field("wxzz", v.untyped))
        def wxzw : Vec4 = Term(Field("wxzw", v.untyped))
        def wxwx : Vec4 = Term(Field("wxwx", v.untyped))
        def wxwy : Vec4 = Term(Field("wxwy", v.untyped))
        def wxwz : Vec4 = Term(Field("wxwz", v.untyped))
        def wxww : Vec4 = Term(Field("wxww", v.untyped))
        def wyxx : Vec4 = Term(Field("wyxx", v.untyped))
        def wyxy : Vec4 = Term(Field("wyxy", v.untyped))
        def wyxz : Vec4 = Term(Field("wyxz", v.untyped))
        def wyxw : Vec4 = Term(Field("wyxw", v.untyped))
        def wyyx : Vec4 = Term(Field("wyyx", v.untyped))
        def wyyy : Vec4 = Term(Field("wyyy", v.untyped))
        def wyyz : Vec4 = Term(Field("wyyz", v.untyped))
        def wyyw : Vec4 = Term(Field("wyyw", v.untyped))
        def wyzx : Vec4 = Term(Field("wyzx", v.untyped))
        def wyzy : Vec4 = Term(Field("wyzy", v.untyped))
        def wyzz : Vec4 = Term(Field("wyzz", v.untyped))
        def wyzw : Vec4 = Term(Field("wyzw", v.untyped))
        def wywx : Vec4 = Term(Field("wywx", v.untyped))
        def wywy : Vec4 = Term(Field("wywy", v.untyped))
        def wywz : Vec4 = Term(Field("wywz", v.untyped))
        def wyww : Vec4 = Term(Field("wyww", v.untyped))
        def wzxx : Vec4 = Term(Field("wzxx", v.untyped))
        def wzxy : Vec4 = Term(Field("wzxy", v.untyped))
        def wzxz : Vec4 = Term(Field("wzxz", v.untyped))
        def wzxw : Vec4 = Term(Field("wzxw", v.untyped))
        def wzyx : Vec4 = Term(Field("wzyx", v.untyped))
        def wzyy : Vec4 = Term(Field("wzyy", v.untyped))
        def wzyz : Vec4 = Term(Field("wzyz", v.untyped))
        def wzyw : Vec4 = Term(Field("wzyw", v.untyped))
        def wzzx : Vec4 = Term(Field("wzzx", v.untyped))
        def wzzy : Vec4 = Term(Field("wzzy", v.untyped))
        def wzzz : Vec4 = Term(Field("wzzz", v.untyped))
        def wzzw : Vec4 = Term(Field("wzzw", v.untyped))
        def wzwx : Vec4 = Term(Field("wzwx", v.untyped))
        def wzwy : Vec4 = Term(Field("wzwy", v.untyped))
        def wzwz : Vec4 = Term(Field("wzwz", v.untyped))
        def wzww : Vec4 = Term(Field("wzww", v.untyped))
        def wwxx : Vec4 = Term(Field("wwxx", v.untyped))
        def wwxy : Vec4 = Term(Field("wwxy", v.untyped))
        def wwxz : Vec4 = Term(Field("wwxz", v.untyped))
        def wwxw : Vec4 = Term(Field("wwxw", v.untyped))
        def wwyx : Vec4 = Term(Field("wwyx", v.untyped))
        def wwyy : Vec4 = Term(Field("wwyy", v.untyped))
        def wwyz : Vec4 = Term(Field("wwyz", v.untyped))
        def wwyw : Vec4 = Term(Field("wwyw", v.untyped))
        def wwzx : Vec4 = Term(Field("wwzx", v.untyped))
        def wwzy : Vec4 = Term(Field("wwzy", v.untyped))
        def wwzz : Vec4 = Term(Field("wwzz", v.untyped))
        def wwzw : Vec4 = Term(Field("wwzw", v.untyped))
        def wwwx : Vec4 = Term(Field("wwwx", v.untyped))
        def wwwy : Vec4 = Term(Field("wwwy", v.untyped))
        def wwwz : Vec4 = Term(Field("wwwz", v.untyped))
        def wwww : Vec4 = Term(Field("wwww", v.untyped))

        def r : R = Term(Field("r", v.untyped))
        def g : R = Term(Field("g", v.untyped))
        def b : R = Term(Field("b", v.untyped))
        def a : R = Term(Field("a", v.untyped))

        def rr : Vec2 = Term(Field("rr", v.untyped))
        def rg : Vec2 = Term(Field("rg", v.untyped))
        def rb : Vec2 = Term(Field("rb", v.untyped))
        def ra : Vec2 = Term(Field("ra", v.untyped))
        def gr : Vec2 = Term(Field("gr", v.untyped))
        def gg : Vec2 = Term(Field("gg", v.untyped))
        def gb : Vec2 = Term(Field("gb", v.untyped))
        def ga : Vec2 = Term(Field("ga", v.untyped))
        def br : Vec2 = Term(Field("br", v.untyped))
        def bg : Vec2 = Term(Field("bg", v.untyped))
        def bb : Vec2 = Term(Field("bb", v.untyped))
        def ba : Vec2 = Term(Field("ba", v.untyped))
        def ar : Vec2 = Term(Field("ar", v.untyped))
        def ag : Vec2 = Term(Field("ag", v.untyped))
        def ab : Vec2 = Term(Field("ab", v.untyped))
        def aa : Vec2 = Term(Field("aa", v.untyped))

        def rrr : Vec3 = Term(Field("rrr", v.untyped))
        def rrg : Vec3 = Term(Field("rrg", v.untyped))
        def rrb : Vec3 = Term(Field("rrb", v.untyped))
        def rra : Vec3 = Term(Field("rra", v.untyped))
        def rgr : Vec3 = Term(Field("rgr", v.untyped))
        def rgg : Vec3 = Term(Field("rgg", v.untyped))
        def rgb : Vec3 = Term(Field("rgb", v.untyped))
        def rga : Vec3 = Term(Field("rga", v.untyped))
        def rbr : Vec3 = Term(Field("rbr", v.untyped))
        def rbg : Vec3 = Term(Field("rbg", v.untyped))
        def rbb : Vec3 = Term(Field("rbb", v.untyped))
        def rba : Vec3 = Term(Field("rba", v.untyped))
        def rar : Vec3 = Term(Field("rar", v.untyped))
        def rag : Vec3 = Term(Field("rag", v.untyped))
        def rab : Vec3 = Term(Field("rab", v.untyped))
        def raa : Vec3 = Term(Field("raa", v.untyped))
        def grr : Vec3 = Term(Field("grr", v.untyped))
        def grg : Vec3 = Term(Field("grg", v.untyped))
        def grb : Vec3 = Term(Field("grb", v.untyped))
        def gra : Vec3 = Term(Field("gra", v.untyped))
        def ggr : Vec3 = Term(Field("ggr", v.untyped))
        def ggg : Vec3 = Term(Field("ggg", v.untyped))
        def ggb : Vec3 = Term(Field("ggb", v.untyped))
        def gga : Vec3 = Term(Field("gga", v.untyped))
        def gbr : Vec3 = Term(Field("gbr", v.untyped))
        def gbg : Vec3 = Term(Field("gbg", v.untyped))
        def gbb : Vec3 = Term(Field("gbb", v.untyped))
        def gba : Vec3 = Term(Field("gba", v.untyped))
        def gar : Vec3 = Term(Field("gar", v.untyped))
        def gag : Vec3 = Term(Field("gag", v.untyped))
        def gab : Vec3 = Term(Field("gab", v.untyped))
        def gaa : Vec3 = Term(Field("gaa", v.untyped))
        def brr : Vec3 = Term(Field("brr", v.untyped))
        def brg : Vec3 = Term(Field("brg", v.untyped))
        def brb : Vec3 = Term(Field("brb", v.untyped))
        def bra : Vec3 = Term(Field("bra", v.untyped))
        def bgr : Vec3 = Term(Field("bgr", v.untyped))
        def bgg : Vec3 = Term(Field("bgg", v.untyped))
        def bgb : Vec3 = Term(Field("bgb", v.untyped))
        def bga : Vec3 = Term(Field("bga", v.untyped))
        def bbr : Vec3 = Term(Field("bbr", v.untyped))
        def bbg : Vec3 = Term(Field("bbg", v.untyped))
        def bbb : Vec3 = Term(Field("bbb", v.untyped))
        def bba : Vec3 = Term(Field("bba", v.untyped))
        def bar : Vec3 = Term(Field("bar", v.untyped))
        def bag : Vec3 = Term(Field("bag", v.untyped))
        def bab : Vec3 = Term(Field("bab", v.untyped))
        def baa : Vec3 = Term(Field("baa", v.untyped))
        def arr : Vec3 = Term(Field("arr", v.untyped))
        def arg : Vec3 = Term(Field("arg", v.untyped))
        def arb : Vec3 = Term(Field("arb", v.untyped))
        def ara : Vec3 = Term(Field("ara", v.untyped))
        def agr : Vec3 = Term(Field("agr", v.untyped))
        def agg : Vec3 = Term(Field("agg", v.untyped))
        def agb : Vec3 = Term(Field("agb", v.untyped))
        def aga : Vec3 = Term(Field("aga", v.untyped))
        def abr : Vec3 = Term(Field("abr", v.untyped))
        def abg : Vec3 = Term(Field("abg", v.untyped))
        def abb : Vec3 = Term(Field("abb", v.untyped))
        def aba : Vec3 = Term(Field("aba", v.untyped))
        def aar : Vec3 = Term(Field("aar", v.untyped))
        def aag : Vec3 = Term(Field("aag", v.untyped))
        def aab : Vec3 = Term(Field("aab", v.untyped))
        def aaa : Vec3 = Term(Field("aaa", v.untyped))

        def rrrr : Vec4 = Term(Field("rrrr", v.untyped))
        def rrrg : Vec4 = Term(Field("rrrg", v.untyped))
        def rrrb : Vec4 = Term(Field("rrrb", v.untyped))
        def rrra : Vec4 = Term(Field("rrra", v.untyped))
        def rrgr : Vec4 = Term(Field("rrgr", v.untyped))
        def rrgg : Vec4 = Term(Field("rrgg", v.untyped))
        def rrgb : Vec4 = Term(Field("rrgb", v.untyped))
        def rrga : Vec4 = Term(Field("rrga", v.untyped))
        def rrbr : Vec4 = Term(Field("rrbr", v.untyped))
        def rrbg : Vec4 = Term(Field("rrbg", v.untyped))
        def rrbb : Vec4 = Term(Field("rrbb", v.untyped))
        def rrba : Vec4 = Term(Field("rrba", v.untyped))
        def rrar : Vec4 = Term(Field("rrar", v.untyped))
        def rrag : Vec4 = Term(Field("rrag", v.untyped))
        def rrab : Vec4 = Term(Field("rrab", v.untyped))
        def rraa : Vec4 = Term(Field("rraa", v.untyped))
        def rgrr : Vec4 = Term(Field("rgrr", v.untyped))
        def rgrg : Vec4 = Term(Field("rgrg", v.untyped))
        def rgrb : Vec4 = Term(Field("rgrb", v.untyped))
        def rgra : Vec4 = Term(Field("rgra", v.untyped))
        def rggr : Vec4 = Term(Field("rggr", v.untyped))
        def rggg : Vec4 = Term(Field("rggg", v.untyped))
        def rggb : Vec4 = Term(Field("rggb", v.untyped))
        def rgga : Vec4 = Term(Field("rgga", v.untyped))
        def rgbr : Vec4 = Term(Field("rgbr", v.untyped))
        def rgbg : Vec4 = Term(Field("rgbg", v.untyped))
        def rgbb : Vec4 = Term(Field("rgbb", v.untyped))
        def rgba : Vec4 = Term(Field("rgba", v.untyped))
        def rgar : Vec4 = Term(Field("rgar", v.untyped))
        def rgag : Vec4 = Term(Field("rgag", v.untyped))
        def rgab : Vec4 = Term(Field("rgab", v.untyped))
        def rgaa : Vec4 = Term(Field("rgaa", v.untyped))
        def rbrr : Vec4 = Term(Field("rbrr", v.untyped))
        def rbrg : Vec4 = Term(Field("rbrg", v.untyped))
        def rbrb : Vec4 = Term(Field("rbrb", v.untyped))
        def rbra : Vec4 = Term(Field("rbra", v.untyped))
        def rbgr : Vec4 = Term(Field("rbgr", v.untyped))
        def rbgg : Vec4 = Term(Field("rbgg", v.untyped))
        def rbgb : Vec4 = Term(Field("rbgb", v.untyped))
        def rbga : Vec4 = Term(Field("rbga", v.untyped))
        def rbbr : Vec4 = Term(Field("rbbr", v.untyped))
        def rbbg : Vec4 = Term(Field("rbbg", v.untyped))
        def rbbb : Vec4 = Term(Field("rbbb", v.untyped))
        def rbba : Vec4 = Term(Field("rbba", v.untyped))
        def rbar : Vec4 = Term(Field("rbar", v.untyped))
        def rbag : Vec4 = Term(Field("rbag", v.untyped))
        def rbab : Vec4 = Term(Field("rbab", v.untyped))
        def rbaa : Vec4 = Term(Field("rbaa", v.untyped))
        def rarr : Vec4 = Term(Field("rarr", v.untyped))
        def rarg : Vec4 = Term(Field("rarg", v.untyped))
        def rarb : Vec4 = Term(Field("rarb", v.untyped))
        def rara : Vec4 = Term(Field("rara", v.untyped))
        def ragr : Vec4 = Term(Field("ragr", v.untyped))
        def ragg : Vec4 = Term(Field("ragg", v.untyped))
        def ragb : Vec4 = Term(Field("ragb", v.untyped))
        def raga : Vec4 = Term(Field("raga", v.untyped))
        def rabr : Vec4 = Term(Field("rabr", v.untyped))
        def rabg : Vec4 = Term(Field("rabg", v.untyped))
        def rabb : Vec4 = Term(Field("rabb", v.untyped))
        def raba : Vec4 = Term(Field("raba", v.untyped))
        def raar : Vec4 = Term(Field("raar", v.untyped))
        def raag : Vec4 = Term(Field("raag", v.untyped))
        def raab : Vec4 = Term(Field("raab", v.untyped))
        def raaa : Vec4 = Term(Field("raaa", v.untyped))
        def grrr : Vec4 = Term(Field("grrr", v.untyped))
        def grrg : Vec4 = Term(Field("grrg", v.untyped))
        def grrb : Vec4 = Term(Field("grrb", v.untyped))
        def grra : Vec4 = Term(Field("grra", v.untyped))
        def grgr : Vec4 = Term(Field("grgr", v.untyped))
        def grgg : Vec4 = Term(Field("grgg", v.untyped))
        def grgb : Vec4 = Term(Field("grgb", v.untyped))
        def grga : Vec4 = Term(Field("grga", v.untyped))
        def grbr : Vec4 = Term(Field("grbr", v.untyped))
        def grbg : Vec4 = Term(Field("grbg", v.untyped))
        def grbb : Vec4 = Term(Field("grbb", v.untyped))
        def grba : Vec4 = Term(Field("grba", v.untyped))
        def grar : Vec4 = Term(Field("grar", v.untyped))
        def grag : Vec4 = Term(Field("grag", v.untyped))
        def grab : Vec4 = Term(Field("grab", v.untyped))
        def graa : Vec4 = Term(Field("graa", v.untyped))
        def ggrr : Vec4 = Term(Field("ggrr", v.untyped))
        def ggrg : Vec4 = Term(Field("ggrg", v.untyped))
        def ggrb : Vec4 = Term(Field("ggrb", v.untyped))
        def ggra : Vec4 = Term(Field("ggra", v.untyped))
        def gggr : Vec4 = Term(Field("gggr", v.untyped))
        def gggg : Vec4 = Term(Field("gggg", v.untyped))
        def gggb : Vec4 = Term(Field("gggb", v.untyped))
        def ggga : Vec4 = Term(Field("ggga", v.untyped))
        def ggbr : Vec4 = Term(Field("ggbr", v.untyped))
        def ggbg : Vec4 = Term(Field("ggbg", v.untyped))
        def ggbb : Vec4 = Term(Field("ggbb", v.untyped))
        def ggba : Vec4 = Term(Field("ggba", v.untyped))
        def ggar : Vec4 = Term(Field("ggar", v.untyped))
        def ggag : Vec4 = Term(Field("ggag", v.untyped))
        def ggab : Vec4 = Term(Field("ggab", v.untyped))
        def ggaa : Vec4 = Term(Field("ggaa", v.untyped))
        def gbrr : Vec4 = Term(Field("gbrr", v.untyped))
        def gbrg : Vec4 = Term(Field("gbrg", v.untyped))
        def gbrb : Vec4 = Term(Field("gbrb", v.untyped))
        def gbra : Vec4 = Term(Field("gbra", v.untyped))
        def gbgr : Vec4 = Term(Field("gbgr", v.untyped))
        def gbgg : Vec4 = Term(Field("gbgg", v.untyped))
        def gbgb : Vec4 = Term(Field("gbgb", v.untyped))
        def gbga : Vec4 = Term(Field("gbga", v.untyped))
        def gbbr : Vec4 = Term(Field("gbbr", v.untyped))
        def gbbg : Vec4 = Term(Field("gbbg", v.untyped))
        def gbbb : Vec4 = Term(Field("gbbb", v.untyped))
        def gbba : Vec4 = Term(Field("gbba", v.untyped))
        def gbar : Vec4 = Term(Field("gbar", v.untyped))
        def gbag : Vec4 = Term(Field("gbag", v.untyped))
        def gbab : Vec4 = Term(Field("gbab", v.untyped))
        def gbaa : Vec4 = Term(Field("gbaa", v.untyped))
        def garr : Vec4 = Term(Field("garr", v.untyped))
        def garg : Vec4 = Term(Field("garg", v.untyped))
        def garb : Vec4 = Term(Field("garb", v.untyped))
        def gara : Vec4 = Term(Field("gara", v.untyped))
        def gagr : Vec4 = Term(Field("gagr", v.untyped))
        def gagg : Vec4 = Term(Field("gagg", v.untyped))
        def gagb : Vec4 = Term(Field("gagb", v.untyped))
        def gaga : Vec4 = Term(Field("gaga", v.untyped))
        def gabr : Vec4 = Term(Field("gabr", v.untyped))
        def gabg : Vec4 = Term(Field("gabg", v.untyped))
        def gabb : Vec4 = Term(Field("gabb", v.untyped))
        def gaba : Vec4 = Term(Field("gaba", v.untyped))
        def gaar : Vec4 = Term(Field("gaar", v.untyped))
        def gaag : Vec4 = Term(Field("gaag", v.untyped))
        def gaab : Vec4 = Term(Field("gaab", v.untyped))
        def gaaa : Vec4 = Term(Field("gaaa", v.untyped))
        def brrr : Vec4 = Term(Field("brrr", v.untyped))
        def brrg : Vec4 = Term(Field("brrg", v.untyped))
        def brrb : Vec4 = Term(Field("brrb", v.untyped))
        def brra : Vec4 = Term(Field("brra", v.untyped))
        def brgr : Vec4 = Term(Field("brgr", v.untyped))
        def brgg : Vec4 = Term(Field("brgg", v.untyped))
        def brgb : Vec4 = Term(Field("brgb", v.untyped))
        def brga : Vec4 = Term(Field("brga", v.untyped))
        def brbr : Vec4 = Term(Field("brbr", v.untyped))
        def brbg : Vec4 = Term(Field("brbg", v.untyped))
        def brbb : Vec4 = Term(Field("brbb", v.untyped))
        def brba : Vec4 = Term(Field("brba", v.untyped))
        def brar : Vec4 = Term(Field("brar", v.untyped))
        def brag : Vec4 = Term(Field("brag", v.untyped))
        def brab : Vec4 = Term(Field("brab", v.untyped))
        def braa : Vec4 = Term(Field("braa", v.untyped))
        def bgrr : Vec4 = Term(Field("bgrr", v.untyped))
        def bgrg : Vec4 = Term(Field("bgrg", v.untyped))
        def bgrb : Vec4 = Term(Field("bgrb", v.untyped))
        def bgra : Vec4 = Term(Field("bgra", v.untyped))
        def bggr : Vec4 = Term(Field("bggr", v.untyped))
        def bggg : Vec4 = Term(Field("bggg", v.untyped))
        def bggb : Vec4 = Term(Field("bggb", v.untyped))
        def bgga : Vec4 = Term(Field("bgga", v.untyped))
        def bgbr : Vec4 = Term(Field("bgbr", v.untyped))
        def bgbg : Vec4 = Term(Field("bgbg", v.untyped))
        def bgbb : Vec4 = Term(Field("bgbb", v.untyped))
        def bgba : Vec4 = Term(Field("bgba", v.untyped))
        def bgar : Vec4 = Term(Field("bgar", v.untyped))
        def bgag : Vec4 = Term(Field("bgag", v.untyped))
        def bgab : Vec4 = Term(Field("bgab", v.untyped))
        def bgaa : Vec4 = Term(Field("bgaa", v.untyped))
        def bbrr : Vec4 = Term(Field("bbrr", v.untyped))
        def bbrg : Vec4 = Term(Field("bbrg", v.untyped))
        def bbrb : Vec4 = Term(Field("bbrb", v.untyped))
        def bbra : Vec4 = Term(Field("bbra", v.untyped))
        def bbgr : Vec4 = Term(Field("bbgr", v.untyped))
        def bbgg : Vec4 = Term(Field("bbgg", v.untyped))
        def bbgb : Vec4 = Term(Field("bbgb", v.untyped))
        def bbga : Vec4 = Term(Field("bbga", v.untyped))
        def bbbr : Vec4 = Term(Field("bbbr", v.untyped))
        def bbbg : Vec4 = Term(Field("bbbg", v.untyped))
        def bbbb : Vec4 = Term(Field("bbbb", v.untyped))
        def bbba : Vec4 = Term(Field("bbba", v.untyped))
        def bbar : Vec4 = Term(Field("bbar", v.untyped))
        def bbag : Vec4 = Term(Field("bbag", v.untyped))
        def bbab : Vec4 = Term(Field("bbab", v.untyped))
        def bbaa : Vec4 = Term(Field("bbaa", v.untyped))
        def barr : Vec4 = Term(Field("barr", v.untyped))
        def barg : Vec4 = Term(Field("barg", v.untyped))
        def barb : Vec4 = Term(Field("barb", v.untyped))
        def bara : Vec4 = Term(Field("bara", v.untyped))
        def bagr : Vec4 = Term(Field("bagr", v.untyped))
        def bagg : Vec4 = Term(Field("bagg", v.untyped))
        def bagb : Vec4 = Term(Field("bagb", v.untyped))
        def baga : Vec4 = Term(Field("baga", v.untyped))
        def babr : Vec4 = Term(Field("babr", v.untyped))
        def babg : Vec4 = Term(Field("babg", v.untyped))
        def babb : Vec4 = Term(Field("babb", v.untyped))
        def baba : Vec4 = Term(Field("baba", v.untyped))
        def baar : Vec4 = Term(Field("baar", v.untyped))
        def baag : Vec4 = Term(Field("baag", v.untyped))
        def baab : Vec4 = Term(Field("baab", v.untyped))
        def baaa : Vec4 = Term(Field("baaa", v.untyped))
        def arrr : Vec4 = Term(Field("arrr", v.untyped))
        def arrg : Vec4 = Term(Field("arrg", v.untyped))
        def arrb : Vec4 = Term(Field("arrb", v.untyped))
        def arra : Vec4 = Term(Field("arra", v.untyped))
        def argr : Vec4 = Term(Field("argr", v.untyped))
        def argg : Vec4 = Term(Field("argg", v.untyped))
        def argb : Vec4 = Term(Field("argb", v.untyped))
        def arga : Vec4 = Term(Field("arga", v.untyped))
        def arbr : Vec4 = Term(Field("arbr", v.untyped))
        def arbg : Vec4 = Term(Field("arbg", v.untyped))
        def arbb : Vec4 = Term(Field("arbb", v.untyped))
        def arba : Vec4 = Term(Field("arba", v.untyped))
        def arar : Vec4 = Term(Field("arar", v.untyped))
        def arag : Vec4 = Term(Field("arag", v.untyped))
        def arab : Vec4 = Term(Field("arab", v.untyped))
        def araa : Vec4 = Term(Field("araa", v.untyped))
        def agrr : Vec4 = Term(Field("agrr", v.untyped))
        def agrg : Vec4 = Term(Field("agrg", v.untyped))
        def agrb : Vec4 = Term(Field("agrb", v.untyped))
        def agra : Vec4 = Term(Field("agra", v.untyped))
        def aggr : Vec4 = Term(Field("aggr", v.untyped))
        def aggg : Vec4 = Term(Field("aggg", v.untyped))
        def aggb : Vec4 = Term(Field("aggb", v.untyped))
        def agga : Vec4 = Term(Field("agga", v.untyped))
        def agbr : Vec4 = Term(Field("agbr", v.untyped))
        def agbg : Vec4 = Term(Field("agbg", v.untyped))
        def agbb : Vec4 = Term(Field("agbb", v.untyped))
        def agba : Vec4 = Term(Field("agba", v.untyped))
        def agar : Vec4 = Term(Field("agar", v.untyped))
        def agag : Vec4 = Term(Field("agag", v.untyped))
        def agab : Vec4 = Term(Field("agab", v.untyped))
        def agaa : Vec4 = Term(Field("agaa", v.untyped))
        def abrr : Vec4 = Term(Field("abrr", v.untyped))
        def abrg : Vec4 = Term(Field("abrg", v.untyped))
        def abrb : Vec4 = Term(Field("abrb", v.untyped))
        def abra : Vec4 = Term(Field("abra", v.untyped))
        def abgr : Vec4 = Term(Field("abgr", v.untyped))
        def abgg : Vec4 = Term(Field("abgg", v.untyped))
        def abgb : Vec4 = Term(Field("abgb", v.untyped))
        def abga : Vec4 = Term(Field("abga", v.untyped))
        def abbr : Vec4 = Term(Field("abbr", v.untyped))
        def abbg : Vec4 = Term(Field("abbg", v.untyped))
        def abbb : Vec4 = Term(Field("abbb", v.untyped))
        def abba : Vec4 = Term(Field("abba", v.untyped))
        def abar : Vec4 = Term(Field("abar", v.untyped))
        def abag : Vec4 = Term(Field("abag", v.untyped))
        def abab : Vec4 = Term(Field("abab", v.untyped))
        def abaa : Vec4 = Term(Field("abaa", v.untyped))
        def aarr : Vec4 = Term(Field("aarr", v.untyped))
        def aarg : Vec4 = Term(Field("aarg", v.untyped))
        def aarb : Vec4 = Term(Field("aarb", v.untyped))
        def aara : Vec4 = Term(Field("aara", v.untyped))
        def aagr : Vec4 = Term(Field("aagr", v.untyped))
        def aagg : Vec4 = Term(Field("aagg", v.untyped))
        def aagb : Vec4 = Term(Field("aagb", v.untyped))
        def aaga : Vec4 = Term(Field("aaga", v.untyped))
        def aabr : Vec4 = Term(Field("aabr", v.untyped))
        def aabg : Vec4 = Term(Field("aabg", v.untyped))
        def aabb : Vec4 = Term(Field("aabb", v.untyped))
        def aaba : Vec4 = Term(Field("aaba", v.untyped))
        def aaar : Vec4 = Term(Field("aaar", v.untyped))
        def aaag : Vec4 = Term(Field("aaag", v.untyped))
        def aaab : Vec4 = Term(Field("aaab", v.untyped))
        def aaaa : Vec4 = Term(Field("aaaa", v.untyped))
    }


    // Bind native functions curries

    def bind1[A1, A2](f : Term[A1] => Term[A2], nameHint : String)(implicit
        typeA1 : VariableType[Term[A1]],
        typeA2 : VariableType[Term[A2]]
    ) : Term[A1] => Term[A2] = {a1 : Term[A1] => Term[A2](FunctionDefinitionCall(
        definition = DomainFunctionDefinition(
            identity = f,
            signature = Signature(nameHint, typeA2.t, Seq(typeA1.t)),
            body = {case Seq(a) => f(Term[A1](a)).untyped}
        ),
        arguments = Some(Seq(a1.untyped))
    ))}

    def bind2[A1, A2, A3](f : Term[A1] => Term[A2] => Term[A3], nameHint : String)(implicit
        typeA1 : VariableType[Term[A1]],
        typeA2 : VariableType[Term[A2]],
        typeA3 : VariableType[Term[A3]]
    ) : Term[A1] => Term[A2] => Term[A3] = {a1 : Term[A1] => a2 : Term[A2] => Term[A3](FunctionDefinitionCall(
        definition = DomainFunctionDefinition(
            identity = f,
            signature = Signature(nameHint, typeA3.t, Seq(typeA1.t, typeA2.t)),
            body = {case Seq(a, b) => f(Term[A1](a))(Term[A2](b)).untyped}
        ),
        arguments = Some(Seq(a1.untyped, a2.untyped))
    ))}

    def bind3[A1, A2, A3, A4](f : Term[A1] => Term[A2] => Term[A3] => Term[A4], nameHint : String)(implicit
        typeA1 : VariableType[Term[A1]],
        typeA2 : VariableType[Term[A2]],
        typeA3 : VariableType[Term[A3]],
        typeA4 : VariableType[Term[A4]]
    ) : Term[A1] => Term[A2] => Term[A3] => Term[A4] = {a1 : Term[A1] => a2 : Term[A2] => a3 : Term[A3] => Term[A4](FunctionDefinitionCall(
        definition = DomainFunctionDefinition(
            identity = f,
            signature = Signature(nameHint, typeA4.t, Seq(typeA1.t, typeA2.t, typeA3.t)),
            body = {case Seq(a, b, c) => f(Term[A1](a))(Term[A2](b))(Term[A3](c)).untyped}
        ),
        arguments = Some(Seq(a1.untyped, a2.untyped, a3.untyped))
    ))}

    // Bind native functions uncurries

    def bind2u[A1, A2, A3](f : (Term[A1], Term[A2]) => Term[A3], nameHint : String)(implicit
        typeA1 : VariableType[Term[A1]],
        typeA2 : VariableType[Term[A2]],
        typeA3 : VariableType[Term[A3]]
    ) : (Term[A1], Term[A2]) => Term[A3] = Function.uncurried(bind2(f.curried, nameHint))


    // Bind foreign functions

    def bindNativeConstant[A](source : String)(implicit
        typeA : VariableType[Term[A]]
    ) : Term[A] = {Term[A](FunctionDefinitionCall(
        definition = NativeFunctionDefinition(
            source = source,
            returnType = typeA.t,
            argumentTypes = Seq()
        ),
        arguments = None
    ))}

    def bindNative0[A](source : String)(implicit
        typeA : VariableType[Term[A]]
    ) : Term[A] = {Term[A](FunctionDefinitionCall(
        definition = NativeFunctionDefinition(
            source = source,
            returnType = typeA.t,
            argumentTypes = Seq()
        ),
        arguments = Some(Seq())
    ))}
    def bindNative1[A1, A2](source : String)(implicit
        typeA1 : VariableType[Term[A1]],
        typeA2 : VariableType[Term[A2]]
    ) : Term[A1] => Term[A2] = {a1 : Term[A1] => Term[A2](FunctionDefinitionCall(
        definition = NativeFunctionDefinition(
            source = source,
            returnType = typeA2.t,
            argumentTypes = Seq(typeA1.t)
        ),
        arguments = Some(Seq(a1.untyped))
    ))}

    def bindNative2[A1, A2, A3](source : String)(implicit
        typeA1 : VariableType[Term[A1]],
        typeA2 : VariableType[Term[A2]],
        typeA3 : VariableType[Term[A3]]
    ) : Term[A1] => Term[A2] => Term[A3] = {a1 : Term[A1] => a2 : Term[A2] => Term[A3](FunctionDefinitionCall(
        definition = NativeFunctionDefinition(
            source = source,
            returnType = typeA3.t,
            argumentTypes = Seq(typeA1.t, typeA2.t)
        ),
        arguments = Some(Seq(a1.untyped, a2.untyped))
    ))}

    def bindNative4[A1, A2, A3, A4, A5](source : String)(implicit
        typeA1 : VariableType[Term[A1]],
        typeA2 : VariableType[Term[A2]],
        typeA3 : VariableType[Term[A3]],
        typeA4 : VariableType[Term[A4]],
        typeA5 : VariableType[Term[A5]]
    ) : Term[A1] => Term[A2] => Term[A3] => Term[A4] => Term[A5] = {a1 : Term[A1] => a2 : Term[A2] => a3 : Term[A3] => a4 : Term[A4] => Term[A5](FunctionDefinitionCall(
        definition = NativeFunctionDefinition(
            source = source,
            returnType = typeA5.t,
            argumentTypes = Seq(typeA1.t, typeA2.t, typeA3.t, typeA4.t)
        ),
        arguments = Some(Seq(a1.untyped, a2.untyped, a3.untyped, a4.untyped))
    ))}

}
